"use client";

import React from "react";
import {PieChart, Pie, Cell, ResponsiveContainer, Tooltip} from "recharts";
import * as d3 from "d3-scale-chromatic";

import {usePortfolioData} from "@/hooks/usePortfolioData";


export function CircleChart() {
    const {portfolio, loading} = usePortfolioData();

    if (loading) {
        return (
            <div className="flex items-center justify-center h-[250px] text-[var(--color-text-muted)]">
                –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...
            </div>
        );
    }

    if (!portfolio.length) {
        return (
            <div className="flex items-center justify-center h-[250px] text-[var(--color-text-muted)]">
                –ü–æ–∫–∏ –Ω–µ–º–∞—î –º–æ–Ω–µ—Ç —É –ø–æ—Ä—Ç—Ñ–µ–ª—ñ
            </div>
        );
    }

    const COLORS = portfolio.map((_, i) =>
        d3.interpolateRainbow(i / portfolio.length)
    );

    // üßÆ –î–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ (–≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ø–æ –≤—ñ–¥—Å–æ—Ç–∫—É ‚Äî –≤—ñ–¥ –±—ñ–ª—å—à–æ–≥–æ –¥–æ –º–µ–Ω—à–æ–≥–æ)
    const chartData = portfolio
        .map((coin) => ({
            name: coin.symbol,
            value: parseFloat(coin.percent.toFixed(2)),
        }))
        .sort((a, b) => b.value - a.value); // üî• —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —Å–ø–∞–¥–∞–Ω–Ω—é


    return (
        <div className="flex flex-col md:flex-row items-center justify-between w-full h-full gap-4 p-2">
            {/* üîπ –õ—ñ–≤–∞ —á–∞—Å—Ç–∏–Ω–∞: –º–æ–Ω–µ—Ç–∏ —É –¥–≤–∞ —Å—Ç–æ–≤–ø—á–∏–∫–∏ */}
            <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-xs w-full md:w-1/2">
                <div className="col-span-2 text-[var(--color-text-muted)] text-[19px] mb-6 font-bold uppercase">
                    Portfolio Allocation
                </div>
                {chartData.map((coin, index) => (
                    <div key={coin.name} className="flex flex-col">
                        <div className="flex items-center justify-between">
                            <div className="flex items-center gap-1">
                                <div
                                    className="w-2.5 h-2.5 rounded-full"
                                    style={{backgroundColor: COLORS[index % COLORS.length]}}
                                ></div>
                                <span className="text-[var(--color-text)] text-[13px] font-semibold">
                                    {coin.name}
                                </span>
                            </div>
                            <span className="text-[var(--color-text-muted)] text-[13px]">
                                    {coin.value.toFixed(2)}%
                             </span>
                        </div>

                        <div className="text-[var(--color-text-muted)] text-[12px] ml-5">
                            ${portfolio.find((p) => p.symbol === coin.name)?.value.toFixed(2) ?? "0.00"}
                        </div>
                    </div>
                ))}
            </div>

            {/* üîπ –ü—Ä–∞–≤–∞ —á–∞—Å—Ç–∏–Ω–∞: –∫—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ */}
            <div className="flex items-center justify-center w-full md:w-1/2">
                <div className="w-[250px] h-[250px]">
                    <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                            <Pie
                                data={chartData}
                                dataKey="value"
                                nameKey="name"
                                cx="50%"
                                cy="50%"
                                outerRadius="100%"
                                innerRadius={0}
                                startAngle={90}
                                endAngle={-270} // –ø–æ–≤–Ω–µ –∫–æ–ª–æ
                                isAnimationActive={false}
                            >
                                {chartData.map((_, index) => (
                                    <Cell
                                        key={`cell-${index}`}
                                        fill={COLORS[index % COLORS.length]}
                                        stroke="var(--color-background)"
                                        strokeWidth={1}
                                    />
                                ))}
                            </Pie>
                            <Tooltip
                                formatter={(value: number) => `${value.toFixed(2)}%`}
                                contentStyle={{
                                    backgroundColor: "var(--color-background)",
                                    border: "1px solid var(--color-border)",
                                    fontSize: "12px",
                                    cursor: "pointer",
                                }}
                                itemStyle={{
                                    color: "#22c55e",
                                    fontWeight: 500,
                                }}
                            />

                        </PieChart>
                    </ResponsiveContainer>
                </div>
            </div>
        </div>
    );
}
